//  _   _  ____   _____ _____
// | \ | |/ __ \ / ____/ ____|
// |  \| | |  | | |   | |
// | . ` | |  | | |   | |
// | |\  | |__| | |___| |____
// |_| \_|\____/ \_____\_____|

// Matrix: Key Numbers
//  0  1  2     3  4  5
//  6  7  8     9 10 11
// 12 13 14    15 16 17

//Layer O (Home): Alpha & Combo All Symbols
//Layer 1: Alpha
//Layer 2: Arrows & Numeric
//Layer 3: VIM

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
/ {
    behaviors {
        //Activates Layer 4
        //One shot sticky layer
        //Any key pressed (except mod keys (cmd, shift etc.)) will trigger home layer switch
        sl_caps: sl_caps {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            release-after-ms = <5000>;
            ignore-modifiers;
        };
        //Activates Layer 1
        //One shot sticky layer
        //Any key pressed (except mod keys (cmd, shift etc.)) will trigger home layer switch
        sl_ignore_mods: sticky_layer_ignore_mods {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            release-after-ms = <5000>;
            ignore-modifiers;
        };
        //Does not deactivate layer
        //When tapped, next key is Left Command + Key
        //If held Left Command Key
         lcmd_sticky_hold: lcmd_sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        //Does not deactivate layer
        //When tapped, next key is Right Command + Key
        //If held Right Command Key
         rcmd_sticky_hold: rcmd_sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        //Does not deactivate layer
        //When tapped, next key is Right Control + Key
        //If held Right Control Key
         rcntrl_sticky_hold: rcntrl_sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
    };
    combos {
        compatible = "zmk,combos";
// ********************************* //
// Function Combos                   //
// ********************************* //
    combo_caps_layer {
        timeout-ms = <50>;
        key-positions = <16 4>;
        bindings = <&sl_caps 4>;
        };
    //Next  Key on Layer 0 is Shifted
    //Initiated on Layer 0
    combo_layer_0_shift_next {
        timeout-ms = <50>;
        key-positions = <13 1>;
        bindings = <&sk LSHFT>;
        layers = <0>;
        };
   //Initiated on Layer 1
   //Output: Repeat Last Key
    combo_repeat_last_key {
        timeout-ms = <50>;
        key-positions = <16 17>;
        bindings = <&key_repeat>;
        };
   //Output: Enter
    combo_enter {
        timeout-ms = <50>;
        key-positions = <13 16>;
        bindings = <&kp ENTER>;
        layers = <0>;
        };
   //Output: Escape
    combo_esc {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp ESCAPE>;
        layers = <0>;
        };
// ********************************* //
// Numbers                           //
// ********************************* //
   //Output: "7"
    combo_num_seven {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp N7>;
        layers = <2>;
        };
   //Output: "8"
    combo_num_eight {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp N8>;
        layers = <2>;
        };
   //Output: "9"
    combo_num_nine {
        timeout-ms = <50>;
        key-positions = <9 10>;
        bindings = <&kp N9>;
        layers = <2>;
        };
// ********************************* //
// Core Symbols                      //
// ********************************* //
   //Output: ":"
    combo_colon {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp COLON>;
        layers = <0>;
    };
   //Output: "$"
    combo_dollar {
        timeout-ms = <50>;
        key-positions = <4 11>;
        bindings = <&kp DLLR>;
        layers = <0>;
    };
   //Output: "%"
    combo_percent {
        timeout-ms = <50>;
        key-positions = <9 4>;
        bindings = <&kp PERCENT>;
        layers = <0>;
    };
   //Output: "("
    combo_left_parenthesis {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp LPAR>;
        layers = <0>;
    };
   //Output: ")"
    combo_right_parenthesis {
        timeout-ms = <50>;
        key-positions = <2 3>;
        bindings = <&kp RPAR>;
        layers = <0>;
    };
   //Output: "{"
    combo_left_brace {
        timeout-ms = <50>;
        key-positions = <7 10>;
        bindings = <&kp LBRC>;
        layers = <0>;
    };
   //Output: "}"
    combo_right_brace {
        timeout-ms = <50>;
        key-positions = <1 4>;
        bindings = <&kp RBRC>;
        layers = <0>;
    };
   //Output: "["
    combo_left_bracket {
        timeout-ms = <50>;
        key-positions = <6 11>;
        bindings = <&kp LBKT>;
        layers = <0>;
    };
   //Output: "]"
    combo_right_bracket {
        timeout-ms = <50>;
        key-positions = <0 5>;
        bindings = <&kp RBKT>;
        layers = <0>;
    };
   //Output: "<"
    combo_less_than {
        timeout-ms = <50>;
        key-positions = <12 6>;
        bindings = <&kp LT>;
        layers = <0>;
    };
   //Output: ">"
    combo_greater_than {
        timeout-ms = <50>;
        key-positions = <11 17>;
        bindings = <&kp GT>;
        layers = <0>;
    };
   //Output: ","
    combo_comma {
        timeout-ms = <50>;
        key-positions = <3 5>;
        bindings = <&kp COMMA>;
        layers = <0>;
    };
   //Output: ";"
    combo_semi_colon {
        timeout-ms = <50>;
        key-positions = <9 10>;
        bindings = <&kp SEMICOLON>;
        layers = <0>;
        };
   //Output: "."
    combo_period {
        timeout-ms = <50>;
        key-positions = <10 11>;
        bindings = <&kp DOT>;
        layers = <0>;
        };
   //Output: "/"
    combo_slash {
        timeout-ms = <50>;
        key-positions = <9 11>;
        bindings = <&kp FSLH>;
        layers = <0>;
        };
   //Output: " ' "
    combo_single_quote {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp APOS>;
        layers = <0>;
    };
   //Output: ' " '
    combo_double_quotes {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp DQT>;
        layers = <0>;
    };
   //Output: " ` "
    combo_grave {
        timeout-ms = <50>;
        key-positions = <0 2>;
        bindings = <&kp GRAVE>;
        layers = <0>;
    };
   //Output: "?"
    combo_question {
        timeout-ms = <50>;
        key-positions = <6 8>;
        bindings = <&kp QMARK>;
        layers = <0>;
    };
   //Output: "!"
    combo_exclamation {
        timeout-ms = <50>;
        key-positions = <6 7>;
        bindings = <&kp EXCL>;
        layers = <0>;
    };
   //Output: "#"
    combo_hash {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp HASH>;
        layers = <0>;
    };
   //Output: "|"
    combo_pipe {
        timeout-ms = <50>;
        key-positions = <1 6>;
        bindings = <&kp PIPE>;
        layers = <0>;
    };
   //Output: "&"
    combo_ampersand {
        timeout-ms = <50>;
        key-positions = <1 8>;
        bindings = <&kp AMPS>;
        layers = <0>;
    };

// ********************************* //
// Non-Core                          //
// ********************************* //

   //Output: "~"
    combo_tilde {
        timeout-ms = <50>;
        key-positions = <2 9>;
        bindings = <&kp TILDE>;
        layers = <0>;
    };
   //Output: "_"
    combo_underscore {
        timeout-ms = <50>;
        key-positions = <3 8>;
        bindings = <&kp UNDER>;
        layers = <0>;
    };
   //Output: "="
    combo_equal {
        timeout-ms = <50>;
        key-positions = <1 10>;
        bindings = <&kp EQUAL>;
        layers = <0>;
    };
   //Output: "+"
    combo_plus {
        timeout-ms = <50>;
        key-positions = <7 4>;
        bindings = <&kp PLUS>;
        layers = <0>;
    };
   //Output: "*"
    combo_asterisk {
        timeout-ms = <50>;
        key-positions = <11 0>;
        bindings = <&kp ASTRK>;
        layers = <0>;
    };
   //Output: "-"
    combo_minus {
        timeout-ms = <50>;
        key-positions = <6 5>;
        bindings = <&kp MINUS>;
        layers = <0>;
    };
   //Output: "@"
    combo_at {
        timeout-ms = <50>;
        key-positions = <9 5>;
        bindings = <&kp AT>;
        layers = <0>;
    };
   //Output: "\"
    combo_backslash {
        timeout-ms = <50>;
        key-positions = <3 11>;
        bindings = <&kp BSLH>;
        layers = <0>;
    };
   //Output: "^"
    combo_caret {
        timeout-ms = <50>;
        key-positions = <6 2>;
        bindings = <&kp CARET>;
        layers = <0>;
    };
};

    keymap {
        compatible = "zmk,keymap";
        default_layer { // L0
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   L + CMD   |   G + SHIFT   |    D + CMD   | //    // |  H + CTRL   |   U + SHIFT    |    O + CMD  | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      S      |     R + L4    |    T + L3    | //    // |   N + L3    |        E       |      A      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   I + CMD   |  SPACE + MEH  |  Tab + Shift | //    // | CNTRL + BCK |       L1       |   C + CMD   | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
&mt RCMD L   &mt SHIFT G              &mt RCTRL D        &mt RCTRL H          &mt SHIFT U         &mt RCMD O
&lt 5 S      &lt 4 R                  &lt 3 T            &lt 3 N              &lt 4 E             &lt 5 A
&mt LCMD I   &mt LC(LS(LALT)) SPACE   &mt LSHIFT TAB     &mt RCTRL BACKSPACE  &sl_ignore_mods 1   &mt RCMD C
            >;
        };
        alphas { // L1
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      V      |       W       |      M       | //    // |      Y      |        F       |      Z      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      J      |       P       |      K       | //    // |      B      |        Q       |      X      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   COMMAND   |               |              | //    // |             |       L0       |   COMMAND   | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
&kp V                        &kp W  &kp M                  &kp Y   &kp F   &kp Z
&kp J                        &kp P  &kp K                  &kp B   &kp Q   &kp X
&lcmd_sticky_hold LCMD LCMD  &none  &none                  &rcntrl_sticky_hold RIGHT_CONTROL RIGHT_CONTROL  &to 0  &rcmd_sticky_hold RCMD RCMD
            >;
        };
        alpha_capped { // L2
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      V      |       W       |      M       | //    // |      Y      |        F       |      Z      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      J      |       P       |      K       | //    // |      B      |        Q       |      X      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |               |              | //    // |             |       L0       |             | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
            &kp LS(V)  &kp LS(W)  &kp LS(M)                &kp LS(Y)  &kp LS(F)  &kp LS(Z)
            &kp LS(J)  &kp LS(P)  &kp LS(K)                &kp LS(B)  &kp LS(Q)  &kp LS(X)
            &none  &none  &none                            &none      &to 0      &none
            >;
        };
        nums { // L3
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |       UP       |             | //    // |      4   (7)|(7)     5    (8)|(8)   6      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |     LEFT    |      DOWN      |    RIGHT    | //    // |      1   (9)|(9)     2       |      3      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   CAPSLOCK  |                |             | //    // |             |                |      0       | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
           &none        &kp UP       &none                              &kp N4   &kp N5   &kp N6
           &kp LEFT     &kp DOWN     &kp RIGHT                          &kp N1   &kp N2   &kp N3
           &kp CAPSLOCK &none        &none                              &trans   &none    &kp N0
            >;
        };
        vim { // L4
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |      C      |        I       |      W      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |      H      |        J       |      K      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |      X     |       NONE      |      L      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
           &none &none &none                                               &kp C   &kp I   &kp W
           &none &none &none                                               &kp H   &kp J   &kp K
           &none &none &none                                               &kp X   &none   &kp L
            >;
        };
        bluetooth { // L5
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |            |               |               | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   SELECT 0  |    SELECT 1    |             | //    // |            |               |    CLEAR ALL  | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |            |               |               | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
           &none          &none         &none                              &none &none &none
           &bt BT_SEL 0   &bt BT_SEL 1  &none                              &none &none &bt BT_CLR
           &none          &none         &none                              &none &none &none
            >;
        };
    };
};

//  _   _  ____   _____ _____
// | \ | |/ __ \ / ____/ ____|
// |  \| | |  | | |   | |
// | . ` | |  | | |   | |
// | |\  | |__| | |___| |____
// |_| \_|\____/ \_____\_____|

// Matrix: Key Numbers
//  0  1  2     3  4  5
//  6  7  8     9 10 11
// 12 13 14    15 16 17

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        //Activates layer 1
        //Switches back to home layer upon press
        //Ignores Mod keys
        sl_ignore_mods: sticky_layer_ignore_mods {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            release-after-ms = <1000>;
            ignore-modifiers;
        };
        //Does not deactivate layer
        //When tapped, next key is Left Shift + Key
        //If held Left Shift Key
        layer_shift: layer_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        //Does not deactivate layer
        //When tapped, next key is Left Command + Key
        //If held Left Command Key
         lcmd_sticky_hold: lcmd_sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        //Does not deactivate layer
        //When tapped, next key is Right Command + Key
        //If held Right Command Key
         rcmd_sticky_hold: rcmd_sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
    };
    combos {
        compatible = "zmk,combos";
    combo_repeat_last_key {
        timeout-ms = <50>;
        key-positions = <15 17>;
        bindings = <&key_repeat>;
        };
    combo_space_backspace {
        timeout-ms = <50>;
        key-positions = <13 16>;
        bindings = <&kp ENTER>;
        layers = <0>;
        };
    combo_esc {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp ESCAPE>;
        layers = <0>;
        };
    combo_comma {
        timeout-ms = <50>;
        key-positions = <3 5>;
        bindings = <&kp COMMA>;
        layers = <0>;
        };
    combo_colon {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp COLON>;
        layers = <0>;
        };
    combo_semi_colon {
        timeout-ms = <50>;
        key-positions = <9 10>;
        bindings = <&kp SEMICOLON>;
        layers = <0>;
        };
    combo_period {
        timeout-ms = <50>;
        key-positions = <10 11>;
        bindings = <&kp DOT>;
        };
    combo_slash {
        timeout-ms = <50>;
        key-positions = <9 11>;
        bindings = <&kp FSLH>;
        };
    combo_dollar {
        timeout-ms = <50>;
        key-positions = <4 11>;
        bindings = <&kp DLLR>;
    };
    combo_percent {
        timeout-ms = <50>;
        key-positions = <4 9>;
        bindings = <&kp PRCNT>;
    };
    combo_single_quote {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp APOS>;
    };
    combo_double_quotes {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp DQT>;
    };
    combo_grave {
        timeout-ms = <50>;
        key-positions = <0 2>;
        bindings = <&kp GRAVE>;
    };
    combo_question {
        timeout-ms = <50>;
        key-positions = <6 8>;
        bindings = <&kp QMARK>;
    };
    combo_exclamation {
        timeout-ms = <50>;
        key-positions = <6 7>;
        bindings = <&kp EXCL>;
    };
    combo_hash {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp HASH>;
    };
    combo_pipe {
        timeout-ms = <50>;
        key-positions = <1 6>;
        bindings = <&kp PIPE>;
    };
    combo_ampersand {
        timeout-ms = <50>;
        key-positions = <1 8>;
        bindings = <&kp AMPS>;
    };
    combo_left_parenthesis {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp LPAR>;
    };
    combo_right_parenthesis {
        timeout-ms = <50>;
        key-positions = <2 3>;
        bindings = <&kp RPAR>;
    };
    combo_left_brace {
        timeout-ms = <50>;
        key-positions = <7 10>;
        bindings = <&kp LBRC>;
    };
    combo_right_brace {
        timeout-ms = <50>;
        key-positions = <1 4>;
        bindings = <&kp RBRC>;
    };
    combo_left_bracket {
        timeout-ms = <50>;
        key-positions = <6 11>;
        bindings = <&kp LBKT>;
    };
    combo_right_bracket {
        timeout-ms = <50>;
        key-positions = <0 5>;
        bindings = <&kp RBKT>;
    };
    combo_less_than {
        timeout-ms = <50>;
        key-positions = <12 17>;
        bindings = <&kp LT>;
    };
    combo_greater_than {
        timeout-ms = <50>;
        key-positions = <12 2>;
        bindings = <&kp GT>;
    };
    combo_equal {
        timeout-ms = <50>;
        key-positions = <12 8>;
        bindings = <&kp EQUAL>;
    };
    combo_plus {
        timeout-ms = <50>;
        key-positions = <12 7>;
        bindings = <&kp PLUS>;
    };
    combo_asterisk {
        timeout-ms = <50>;
        key-positions = <12 6>;
        bindings = <&kp ASTRK>;
    };
    combo_minus {
        timeout-ms = <50>;
        key-positions = <12 1>;
        bindings = <&kp MINUS>;
    };
    combo_tilde {
        timeout-ms = <50>;
        key-positions = <12 0>;
        bindings = <&kp TILDE>;
    };
    combo_underscore {
        timeout-ms = <50>;
        key-positions = <17 9>;
        bindings = <&kp UNDER>;
    };
    combo_backslash {
        timeout-ms = <50>;
        key-positions = <17 10>;
        bindings = <&kp BSLH>;
    };
    combo_caret {
        timeout-ms = <50>;
        key-positions = <17 11>;
        bindings = <&kp CARET>;
    };
    combo_at {
        timeout-ms = <50>;
        key-positions = <17 3>;
        bindings = <&kp AT>;
    };
    combo_num_seven {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp N7>;
        layers = <2>;
        };
    combo_num_eight {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp N8>;
        layers = <2>;
        };
    combo_num_nine {
        timeout-ms = <50>;
        key-positions = <9 10>;
        bindings = <&kp N9>;
        layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer { // L0
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      L      |       G       |      D       | //    // |      H      |        U       |      O      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      S      |       R       |    T + L2    | //    // |   N + L2    |        E       |      A      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   I + CMD   |  SPACE + MEH  |  Tab + Shift | //    // |     L1      |   BCK + CNTRL  |      C      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
&kp L        &kp G                    &kp D              &kp H                &kp U               &kp O
&kp S        &lt 3 R                  &lt 2 T            &lt 2 N              &kp E               &kp A
&mt LCMD I   &mt LC(LS(LALT)) SPACE   &mt LSHIFT TAB     &mt RCTRL BACKSPACE  &sl_ignore_mods 1   &mt RCMD C
            >;
        };
        alphas { // L1
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      V      |       W       |      M       | //    // |      Y      |        F       |      Z      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |      J      |       P       |      K       | //    // |      B      |        Q       |      X      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |   COMMAND   |   OSM SHIFT   |              | //    // |             |      NONE      |   COMMAND   | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
&kp V                        &kp W  &kp M                              &kp Y   &kp F   &kp Z
&kp J                        &kp P  &kp K                              &kp B   &kp Q   &kp X
&lcmd_sticky_hold LCMD LCMD  &none  &layer_shift LSHIFT LSHIFT         &none   &none  &rcmd_sticky_hold RCMD RCMD
            >;
        };
        nums { // L2
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |       UP       |             | //    // |      4      |        5       |      6      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |     LEFT    |      DOWN      |    RIGHT    | //    // |      1      |        2       |      3      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |             |                |             | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
           &none       &kp UP       &none                              &kp N4   &kp N5   &kp N6
           &kp LEFT    &kp DOWN     &kp RIGHT                          &kp N1   &kp N2   &kp N3
           &none       &none        &none                              &trans   &none    &kp N0
            >;
        };
        vim { // L2
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |      C      |        I       |      W      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |      H      |        J       |      K      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
// |             |                |             | //    // |             |                |      L      | //
// ---------------------------------------------- //    // ---------------------------------------------- //
            bindings = <
           &none    &none   &none                              &kp C   &kp I   &kp W
           &none    &none   &none                              &kp H   &kp J   &kp K
           &none    &none   &none                              &kp Y   &kp P    &kp L
            >;
        };
    };
};
